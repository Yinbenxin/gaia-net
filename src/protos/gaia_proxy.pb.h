// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gaia_proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gaia_5fproxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gaia_5fproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gaia_5fproxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gaia_5fproxy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gaia_5fproxy_2eproto;
namespace com {
namespace be {
namespace cube {
namespace core {
namespace networking {
namespace proxy {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Conf;
struct ConfDefaultTypeInternal;
extern ConfDefaultTypeInternal _Conf_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class ServerSummary;
struct ServerSummaryDefaultTypeInternal;
extern ServerSummaryDefaultTypeInternal _ServerSummary_default_instance_;
class VersionRequest;
struct VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
struct VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace proxy
}  // namespace networking
}  // namespace core
}  // namespace cube
}  // namespace be
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::be::cube::core::networking::proxy::Command* Arena::CreateMaybeMessage<::com::be::cube::core::networking::proxy::Command>(Arena*);
template<> ::com::be::cube::core::networking::proxy::Conf* Arena::CreateMaybeMessage<::com::be::cube::core::networking::proxy::Conf>(Arena*);
template<> ::com::be::cube::core::networking::proxy::Metadata* Arena::CreateMaybeMessage<::com::be::cube::core::networking::proxy::Metadata>(Arena*);
template<> ::com::be::cube::core::networking::proxy::Packet* Arena::CreateMaybeMessage<::com::be::cube::core::networking::proxy::Packet>(Arena*);
template<> ::com::be::cube::core::networking::proxy::ServerSummary* Arena::CreateMaybeMessage<::com::be::cube::core::networking::proxy::ServerSummary>(Arena*);
template<> ::com::be::cube::core::networking::proxy::VersionRequest* Arena::CreateMaybeMessage<::com::be::cube::core::networking::proxy::VersionRequest>(Arena*);
template<> ::com::be::cube::core::networking::proxy::VersionResponse* Arena::CreateMaybeMessage<::com::be::cube::core::networking::proxy::VersionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace be {
namespace cube {
namespace core {
namespace networking {
namespace proxy {

enum TaskType : int {
  PSI = 0,
  RSS = 1,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = PSI;
constexpr TaskType TaskType_MAX = RSS;
constexpr int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor();
template<typename T>
inline const std::string& TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskType_descriptor(), enum_t_value);
}
inline bool TaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
enum Operation : int {
  START = 0,
  RUN = 1,
  STOP = 2,
  KILL = 3,
  GET_DATA = 4,
  PUT_DATA = 5,
  Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Operation_IsValid(int value);
constexpr Operation Operation_MIN = START;
constexpr Operation Operation_MAX = PUT_DATA;
constexpr int Operation_ARRAYSIZE = Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_descriptor();
template<typename T>
inline const std::string& Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_descriptor(), enum_t_value);
}
inline bool Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation>(
    Operation_descriptor(), name, value);
}
enum ServiceType : int {
  BASE = 0,
  CUBE = 1,
  EDGE = 2,
  TENSOR = 3,
  OTHER = 4,
  CUBE_ENGINE = 5,
  ServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceType_IsValid(int value);
constexpr ServiceType ServiceType_MIN = BASE;
constexpr ServiceType ServiceType_MAX = CUBE_ENGINE;
constexpr int ServiceType_ARRAYSIZE = ServiceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceType_descriptor();
template<typename T>
inline const std::string& ServiceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceType_descriptor(), enum_t_value);
}
inline bool ServiceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceType>(
    ServiceType_descriptor(), name, value);
}
// ===================================================================

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.be.cube.core.networking.proxy.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command& from) {
    Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.be.cube.core.networking.proxy.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.be.cube.core.networking.proxy.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gaia_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Conf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.be.cube.core.networking.proxy.Conf) */ {
 public:
  inline Conf() : Conf(nullptr) {}
  ~Conf() override;
  explicit PROTOBUF_CONSTEXPR Conf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Conf(const Conf& from);
  Conf(Conf&& from) noexcept
    : Conf() {
    *this = ::std::move(from);
  }

  inline Conf& operator=(const Conf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conf& operator=(Conf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Conf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Conf* internal_default_instance() {
    return reinterpret_cast<const Conf*>(
               &_Conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Conf& a, Conf& b) {
    a.Swap(&b);
  }
  inline void Swap(Conf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Conf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Conf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Conf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Conf& from) {
    Conf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.be.cube.core.networking.proxy.Conf";
  }
  protected:
  explicit Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverallTimeoutFieldNumber = 1,
    kCompletionWaitTimeoutFieldNumber = 2,
    kPacketIntervalTimeoutFieldNumber = 3,
    kMaxRetriesFieldNumber = 4,
  };
  // int64 overallTimeout = 1;
  void clear_overalltimeout();
  int64_t overalltimeout() const;
  void set_overalltimeout(int64_t value);
  private:
  int64_t _internal_overalltimeout() const;
  void _internal_set_overalltimeout(int64_t value);
  public:

  // int64 completionWaitTimeout = 2;
  void clear_completionwaittimeout();
  int64_t completionwaittimeout() const;
  void set_completionwaittimeout(int64_t value);
  private:
  int64_t _internal_completionwaittimeout() const;
  void _internal_set_completionwaittimeout(int64_t value);
  public:

  // int64 packetIntervalTimeout = 3;
  void clear_packetintervaltimeout();
  int64_t packetintervaltimeout() const;
  void set_packetintervaltimeout(int64_t value);
  private:
  int64_t _internal_packetintervaltimeout() const;
  void _internal_set_packetintervaltimeout(int64_t value);
  public:

  // int32 maxRetries = 4;
  void clear_maxretries();
  int32_t maxretries() const;
  void set_maxretries(int32_t value);
  private:
  int32_t _internal_maxretries() const;
  void _internal_set_maxretries(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.be.cube.core.networking.proxy.Conf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t overalltimeout_;
    int64_t completionwaittimeout_;
    int64_t packetintervaltimeout_;
    int32_t maxretries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gaia_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.be.cube.core.networking.proxy.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata& from) {
    Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.be.cube.core.networking.proxy.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kFromPartyIdFieldNumber = 2,
    kToPartyIdFieldNumber = 3,
    kOperatorFieldNumber = 4,
    kConfFieldNumber = 8,
    kServiceTypeFieldNumber = 5,
    kTaskTypeFieldNumber = 6,
    kOperationFieldNumber = 7,
    kFindFieldNumber = 9,
    kSeqFieldNumber = 10,
    kAckFieldNumber = 11,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string fromPartyId = 2;
  void clear_frompartyid();
  const std::string& frompartyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frompartyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frompartyid();
  PROTOBUF_NODISCARD std::string* release_frompartyid();
  void set_allocated_frompartyid(std::string* frompartyid);
  private:
  const std::string& _internal_frompartyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frompartyid(const std::string& value);
  std::string* _internal_mutable_frompartyid();
  public:

  // string toPartyId = 3;
  void clear_topartyid();
  const std::string& topartyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topartyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topartyid();
  PROTOBUF_NODISCARD std::string* release_topartyid();
  void set_allocated_topartyid(std::string* topartyid);
  private:
  const std::string& _internal_topartyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topartyid(const std::string& value);
  std::string* _internal_mutable_topartyid();
  public:

  // string operator = 4;
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_NODISCARD std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // .com.be.cube.core.networking.proxy.Conf conf = 8;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::com::be::cube::core::networking::proxy::Conf& conf() const;
  PROTOBUF_NODISCARD ::com::be::cube::core::networking::proxy::Conf* release_conf();
  ::com::be::cube::core::networking::proxy::Conf* mutable_conf();
  void set_allocated_conf(::com::be::cube::core::networking::proxy::Conf* conf);
  private:
  const ::com::be::cube::core::networking::proxy::Conf& _internal_conf() const;
  ::com::be::cube::core::networking::proxy::Conf* _internal_mutable_conf();
  public:
  void unsafe_arena_set_allocated_conf(
      ::com::be::cube::core::networking::proxy::Conf* conf);
  ::com::be::cube::core::networking::proxy::Conf* unsafe_arena_release_conf();

  // .com.be.cube.core.networking.proxy.ServiceType serviceType = 5;
  void clear_servicetype();
  ::com::be::cube::core::networking::proxy::ServiceType servicetype() const;
  void set_servicetype(::com::be::cube::core::networking::proxy::ServiceType value);
  private:
  ::com::be::cube::core::networking::proxy::ServiceType _internal_servicetype() const;
  void _internal_set_servicetype(::com::be::cube::core::networking::proxy::ServiceType value);
  public:

  // .com.be.cube.core.networking.proxy.TaskType taskType = 6;
  void clear_tasktype();
  ::com::be::cube::core::networking::proxy::TaskType tasktype() const;
  void set_tasktype(::com::be::cube::core::networking::proxy::TaskType value);
  private:
  ::com::be::cube::core::networking::proxy::TaskType _internal_tasktype() const;
  void _internal_set_tasktype(::com::be::cube::core::networking::proxy::TaskType value);
  public:

  // .com.be.cube.core.networking.proxy.Operation operation = 7;
  void clear_operation();
  ::com::be::cube::core::networking::proxy::Operation operation() const;
  void set_operation(::com::be::cube::core::networking::proxy::Operation value);
  private:
  ::com::be::cube::core::networking::proxy::Operation _internal_operation() const;
  void _internal_set_operation(::com::be::cube::core::networking::proxy::Operation value);
  public:

  // bool find = 9;
  void clear_find();
  bool find() const;
  void set_find(bool value);
  private:
  bool _internal_find() const;
  void _internal_set_find(bool value);
  public:

  // int32 seq = 10;
  void clear_seq();
  int32_t seq() const;
  void set_seq(int32_t value);
  private:
  int32_t _internal_seq() const;
  void _internal_set_seq(int32_t value);
  public:

  // int32 ack = 11;
  void clear_ack();
  int32_t ack() const;
  void set_ack(int32_t value);
  private:
  int32_t _internal_ack() const;
  void _internal_set_ack(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.be.cube.core.networking.proxy.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frompartyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topartyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
    ::com::be::cube::core::networking::proxy::Conf* conf_;
    int servicetype_;
    int tasktype_;
    int operation_;
    bool find_;
    int32_t seq_;
    int32_t ack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gaia_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.be.cube.core.networking.proxy.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.be.cube.core.networking.proxy.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .com.be.cube.core.networking.proxy.Metadata header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::com::be::cube::core::networking::proxy::Metadata& header() const;
  PROTOBUF_NODISCARD ::com::be::cube::core::networking::proxy::Metadata* release_header();
  ::com::be::cube::core::networking::proxy::Metadata* mutable_header();
  void set_allocated_header(::com::be::cube::core::networking::proxy::Metadata* header);
  private:
  const ::com::be::cube::core::networking::proxy::Metadata& _internal_header() const;
  ::com::be::cube::core::networking::proxy::Metadata* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::com::be::cube::core::networking::proxy::Metadata* header);
  ::com::be::cube::core::networking::proxy::Metadata* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:com.be.cube.core.networking.proxy.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::com::be::cube::core::networking::proxy::Metadata* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gaia_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class VersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.be.cube.core.networking.proxy.VersionRequest) */ {
 public:
  inline VersionRequest() : VersionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR VersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionRequest(const VersionRequest& from);
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VersionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VersionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.be.cube.core.networking.proxy.VersionRequest";
  }
  protected:
  explicit VersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.be.cube.core.networking.proxy.VersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gaia_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class VersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.be.cube.core.networking.proxy.VersionResponse) */ {
 public:
  inline VersionResponse() : VersionResponse(nullptr) {}
  ~VersionResponse() override;
  explicit PROTOBUF_CONSTEXPR VersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionResponse(const VersionResponse& from);
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionResponse& from) {
    VersionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.be.cube.core.networking.proxy.VersionResponse";
  }
  protected:
  explicit VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.be.cube.core.networking.proxy.VersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gaia_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class ServerSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.be.cube.core.networking.proxy.ServerSummary) */ {
 public:
  inline ServerSummary() : ServerSummary(nullptr) {}
  ~ServerSummary() override;
  explicit PROTOBUF_CONSTEXPR ServerSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerSummary(const ServerSummary& from);
  ServerSummary(ServerSummary&& from) noexcept
    : ServerSummary() {
    *this = ::std::move(from);
  }

  inline ServerSummary& operator=(const ServerSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSummary& operator=(ServerSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerSummary* internal_default_instance() {
    return reinterpret_cast<const ServerSummary*>(
               &_ServerSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerSummary& a, ServerSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerSummary& from) {
    ServerSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.be.cube.core.networking.proxy.ServerSummary";
  }
  protected:
  explicit ServerSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvBytesFieldNumber = 1,
    kPacketCntFieldNumber = 2,
    kElapsedTimeFieldNumber = 3,
  };
  // int64 recv_bytes = 1;
  void clear_recv_bytes();
  int64_t recv_bytes() const;
  void set_recv_bytes(int64_t value);
  private:
  int64_t _internal_recv_bytes() const;
  void _internal_set_recv_bytes(int64_t value);
  public:

  // int64 packet_cnt = 2;
  void clear_packet_cnt();
  int64_t packet_cnt() const;
  void set_packet_cnt(int64_t value);
  private:
  int64_t _internal_packet_cnt() const;
  void _internal_set_packet_cnt(int64_t value);
  public:

  // float elapsed_time = 3;
  void clear_elapsed_time();
  float elapsed_time() const;
  void set_elapsed_time(float value);
  private:
  float _internal_elapsed_time() const;
  void _internal_set_elapsed_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.be.cube.core.networking.proxy.ServerSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t recv_bytes_;
    int64_t packet_cnt_;
    float elapsed_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gaia_5fproxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// string name = 1;
inline void Command::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Command::name() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Command.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Command.name)
}
inline std::string* Command::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Command.name)
  return _s;
}
inline const std::string& Command::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Command::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command::release_name() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Command.name)
  return _impl_.name_.Release();
}
inline void Command::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Command.name)
}

// -------------------------------------------------------------------

// Conf

// int64 overallTimeout = 1;
inline void Conf::clear_overalltimeout() {
  _impl_.overalltimeout_ = int64_t{0};
}
inline int64_t Conf::_internal_overalltimeout() const {
  return _impl_.overalltimeout_;
}
inline int64_t Conf::overalltimeout() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Conf.overallTimeout)
  return _internal_overalltimeout();
}
inline void Conf::_internal_set_overalltimeout(int64_t value) {
  
  _impl_.overalltimeout_ = value;
}
inline void Conf::set_overalltimeout(int64_t value) {
  _internal_set_overalltimeout(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Conf.overallTimeout)
}

// int64 completionWaitTimeout = 2;
inline void Conf::clear_completionwaittimeout() {
  _impl_.completionwaittimeout_ = int64_t{0};
}
inline int64_t Conf::_internal_completionwaittimeout() const {
  return _impl_.completionwaittimeout_;
}
inline int64_t Conf::completionwaittimeout() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Conf.completionWaitTimeout)
  return _internal_completionwaittimeout();
}
inline void Conf::_internal_set_completionwaittimeout(int64_t value) {
  
  _impl_.completionwaittimeout_ = value;
}
inline void Conf::set_completionwaittimeout(int64_t value) {
  _internal_set_completionwaittimeout(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Conf.completionWaitTimeout)
}

// int64 packetIntervalTimeout = 3;
inline void Conf::clear_packetintervaltimeout() {
  _impl_.packetintervaltimeout_ = int64_t{0};
}
inline int64_t Conf::_internal_packetintervaltimeout() const {
  return _impl_.packetintervaltimeout_;
}
inline int64_t Conf::packetintervaltimeout() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Conf.packetIntervalTimeout)
  return _internal_packetintervaltimeout();
}
inline void Conf::_internal_set_packetintervaltimeout(int64_t value) {
  
  _impl_.packetintervaltimeout_ = value;
}
inline void Conf::set_packetintervaltimeout(int64_t value) {
  _internal_set_packetintervaltimeout(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Conf.packetIntervalTimeout)
}

// int32 maxRetries = 4;
inline void Conf::clear_maxretries() {
  _impl_.maxretries_ = 0;
}
inline int32_t Conf::_internal_maxretries() const {
  return _impl_.maxretries_;
}
inline int32_t Conf::maxretries() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Conf.maxRetries)
  return _internal_maxretries();
}
inline void Conf::_internal_set_maxretries(int32_t value) {
  
  _impl_.maxretries_ = value;
}
inline void Conf::set_maxretries(int32_t value) {
  _internal_set_maxretries(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Conf.maxRetries)
}

// -------------------------------------------------------------------

// Metadata

// string taskId = 1;
inline void Metadata::clear_taskid() {
  _impl_.taskid_.ClearToEmpty();
}
inline const std::string& Metadata::taskid() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.taskId)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.taskid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.taskId)
}
inline std::string* Metadata::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Metadata.taskId)
  return _s;
}
inline const std::string& Metadata::_internal_taskid() const {
  return _impl_.taskid_.Get();
}
inline void Metadata::_internal_set_taskid(const std::string& value) {
  
  _impl_.taskid_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_taskid() {
  
  return _impl_.taskid_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_taskid() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Metadata.taskId)
  return _impl_.taskid_.Release();
}
inline void Metadata::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  _impl_.taskid_.SetAllocated(taskid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.taskid_.IsDefault()) {
    _impl_.taskid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Metadata.taskId)
}

// string fromPartyId = 2;
inline void Metadata::clear_frompartyid() {
  _impl_.frompartyid_.ClearToEmpty();
}
inline const std::string& Metadata::frompartyid() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.fromPartyId)
  return _internal_frompartyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_frompartyid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frompartyid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.fromPartyId)
}
inline std::string* Metadata::mutable_frompartyid() {
  std::string* _s = _internal_mutable_frompartyid();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Metadata.fromPartyId)
  return _s;
}
inline const std::string& Metadata::_internal_frompartyid() const {
  return _impl_.frompartyid_.Get();
}
inline void Metadata::_internal_set_frompartyid(const std::string& value) {
  
  _impl_.frompartyid_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_frompartyid() {
  
  return _impl_.frompartyid_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_frompartyid() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Metadata.fromPartyId)
  return _impl_.frompartyid_.Release();
}
inline void Metadata::set_allocated_frompartyid(std::string* frompartyid) {
  if (frompartyid != nullptr) {
    
  } else {
    
  }
  _impl_.frompartyid_.SetAllocated(frompartyid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frompartyid_.IsDefault()) {
    _impl_.frompartyid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Metadata.fromPartyId)
}

// string toPartyId = 3;
inline void Metadata::clear_topartyid() {
  _impl_.topartyid_.ClearToEmpty();
}
inline const std::string& Metadata::topartyid() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.toPartyId)
  return _internal_topartyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_topartyid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topartyid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.toPartyId)
}
inline std::string* Metadata::mutable_topartyid() {
  std::string* _s = _internal_mutable_topartyid();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Metadata.toPartyId)
  return _s;
}
inline const std::string& Metadata::_internal_topartyid() const {
  return _impl_.topartyid_.Get();
}
inline void Metadata::_internal_set_topartyid(const std::string& value) {
  
  _impl_.topartyid_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_topartyid() {
  
  return _impl_.topartyid_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_topartyid() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Metadata.toPartyId)
  return _impl_.topartyid_.Release();
}
inline void Metadata::set_allocated_topartyid(std::string* topartyid) {
  if (topartyid != nullptr) {
    
  } else {
    
  }
  _impl_.topartyid_.SetAllocated(topartyid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topartyid_.IsDefault()) {
    _impl_.topartyid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Metadata.toPartyId)
}

// string operator = 4;
inline void Metadata::clear_operator_() {
  _impl_.operator__.ClearToEmpty();
}
inline const std::string& Metadata::operator_() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_operator_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operator__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.operator)
}
inline std::string* Metadata::mutable_operator_() {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Metadata.operator)
  return _s;
}
inline const std::string& Metadata::_internal_operator_() const {
  return _impl_.operator__.Get();
}
inline void Metadata::_internal_set_operator_(const std::string& value) {
  
  _impl_.operator__.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_operator_() {
  
  return _impl_.operator__.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_operator_() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Metadata.operator)
  return _impl_.operator__.Release();
}
inline void Metadata::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  _impl_.operator__.SetAllocated(operator_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operator__.IsDefault()) {
    _impl_.operator__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Metadata.operator)
}

// .com.be.cube.core.networking.proxy.ServiceType serviceType = 5;
inline void Metadata::clear_servicetype() {
  _impl_.servicetype_ = 0;
}
inline ::com::be::cube::core::networking::proxy::ServiceType Metadata::_internal_servicetype() const {
  return static_cast< ::com::be::cube::core::networking::proxy::ServiceType >(_impl_.servicetype_);
}
inline ::com::be::cube::core::networking::proxy::ServiceType Metadata::servicetype() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.serviceType)
  return _internal_servicetype();
}
inline void Metadata::_internal_set_servicetype(::com::be::cube::core::networking::proxy::ServiceType value) {
  
  _impl_.servicetype_ = value;
}
inline void Metadata::set_servicetype(::com::be::cube::core::networking::proxy::ServiceType value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.serviceType)
}

// .com.be.cube.core.networking.proxy.TaskType taskType = 6;
inline void Metadata::clear_tasktype() {
  _impl_.tasktype_ = 0;
}
inline ::com::be::cube::core::networking::proxy::TaskType Metadata::_internal_tasktype() const {
  return static_cast< ::com::be::cube::core::networking::proxy::TaskType >(_impl_.tasktype_);
}
inline ::com::be::cube::core::networking::proxy::TaskType Metadata::tasktype() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.taskType)
  return _internal_tasktype();
}
inline void Metadata::_internal_set_tasktype(::com::be::cube::core::networking::proxy::TaskType value) {
  
  _impl_.tasktype_ = value;
}
inline void Metadata::set_tasktype(::com::be::cube::core::networking::proxy::TaskType value) {
  _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.taskType)
}

// .com.be.cube.core.networking.proxy.Operation operation = 7;
inline void Metadata::clear_operation() {
  _impl_.operation_ = 0;
}
inline ::com::be::cube::core::networking::proxy::Operation Metadata::_internal_operation() const {
  return static_cast< ::com::be::cube::core::networking::proxy::Operation >(_impl_.operation_);
}
inline ::com::be::cube::core::networking::proxy::Operation Metadata::operation() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.operation)
  return _internal_operation();
}
inline void Metadata::_internal_set_operation(::com::be::cube::core::networking::proxy::Operation value) {
  
  _impl_.operation_ = value;
}
inline void Metadata::set_operation(::com::be::cube::core::networking::proxy::Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.operation)
}

// .com.be.cube.core.networking.proxy.Conf conf = 8;
inline bool Metadata::_internal_has_conf() const {
  return this != internal_default_instance() && _impl_.conf_ != nullptr;
}
inline bool Metadata::has_conf() const {
  return _internal_has_conf();
}
inline void Metadata::clear_conf() {
  if (GetArenaForAllocation() == nullptr && _impl_.conf_ != nullptr) {
    delete _impl_.conf_;
  }
  _impl_.conf_ = nullptr;
}
inline const ::com::be::cube::core::networking::proxy::Conf& Metadata::_internal_conf() const {
  const ::com::be::cube::core::networking::proxy::Conf* p = _impl_.conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::be::cube::core::networking::proxy::Conf&>(
      ::com::be::cube::core::networking::proxy::_Conf_default_instance_);
}
inline const ::com::be::cube::core::networking::proxy::Conf& Metadata::conf() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.conf)
  return _internal_conf();
}
inline void Metadata::unsafe_arena_set_allocated_conf(
    ::com::be::cube::core::networking::proxy::Conf* conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conf_);
  }
  _impl_.conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.be.cube.core.networking.proxy.Metadata.conf)
}
inline ::com::be::cube::core::networking::proxy::Conf* Metadata::release_conf() {
  
  ::com::be::cube::core::networking::proxy::Conf* temp = _impl_.conf_;
  _impl_.conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::be::cube::core::networking::proxy::Conf* Metadata::unsafe_arena_release_conf() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Metadata.conf)
  
  ::com::be::cube::core::networking::proxy::Conf* temp = _impl_.conf_;
  _impl_.conf_ = nullptr;
  return temp;
}
inline ::com::be::cube::core::networking::proxy::Conf* Metadata::_internal_mutable_conf() {
  
  if (_impl_.conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::be::cube::core::networking::proxy::Conf>(GetArenaForAllocation());
    _impl_.conf_ = p;
  }
  return _impl_.conf_;
}
inline ::com::be::cube::core::networking::proxy::Conf* Metadata::mutable_conf() {
  ::com::be::cube::core::networking::proxy::Conf* _msg = _internal_mutable_conf();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Metadata.conf)
  return _msg;
}
inline void Metadata::set_allocated_conf(::com::be::cube::core::networking::proxy::Conf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conf);
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Metadata.conf)
}

// bool find = 9;
inline void Metadata::clear_find() {
  _impl_.find_ = false;
}
inline bool Metadata::_internal_find() const {
  return _impl_.find_;
}
inline bool Metadata::find() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.find)
  return _internal_find();
}
inline void Metadata::_internal_set_find(bool value) {
  
  _impl_.find_ = value;
}
inline void Metadata::set_find(bool value) {
  _internal_set_find(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.find)
}

// int32 seq = 10;
inline void Metadata::clear_seq() {
  _impl_.seq_ = 0;
}
inline int32_t Metadata::_internal_seq() const {
  return _impl_.seq_;
}
inline int32_t Metadata::seq() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.seq)
  return _internal_seq();
}
inline void Metadata::_internal_set_seq(int32_t value) {
  
  _impl_.seq_ = value;
}
inline void Metadata::set_seq(int32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.seq)
}

// int32 ack = 11;
inline void Metadata::clear_ack() {
  _impl_.ack_ = 0;
}
inline int32_t Metadata::_internal_ack() const {
  return _impl_.ack_;
}
inline int32_t Metadata::ack() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Metadata.ack)
  return _internal_ack();
}
inline void Metadata::_internal_set_ack(int32_t value) {
  
  _impl_.ack_ = value;
}
inline void Metadata::set_ack(int32_t value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Metadata.ack)
}

// -------------------------------------------------------------------

// Packet

// .com.be.cube.core.networking.proxy.Metadata header = 1;
inline bool Packet::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Packet::has_header() const {
  return _internal_has_header();
}
inline void Packet::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::com::be::cube::core::networking::proxy::Metadata& Packet::_internal_header() const {
  const ::com::be::cube::core::networking::proxy::Metadata* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::be::cube::core::networking::proxy::Metadata&>(
      ::com::be::cube::core::networking::proxy::_Metadata_default_instance_);
}
inline const ::com::be::cube::core::networking::proxy::Metadata& Packet::header() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Packet.header)
  return _internal_header();
}
inline void Packet::unsafe_arena_set_allocated_header(
    ::com::be::cube::core::networking::proxy::Metadata* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.be.cube.core.networking.proxy.Packet.header)
}
inline ::com::be::cube::core::networking::proxy::Metadata* Packet::release_header() {
  
  ::com::be::cube::core::networking::proxy::Metadata* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::be::cube::core::networking::proxy::Metadata* Packet::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Packet.header)
  
  ::com::be::cube::core::networking::proxy::Metadata* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::com::be::cube::core::networking::proxy::Metadata* Packet::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::be::cube::core::networking::proxy::Metadata>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::com::be::cube::core::networking::proxy::Metadata* Packet::mutable_header() {
  ::com::be::cube::core::networking::proxy::Metadata* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Packet.header)
  return _msg;
}
inline void Packet::set_allocated_header(::com::be::cube::core::networking::proxy::Metadata* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Packet.header)
}

// bytes body = 2;
inline void Packet::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& Packet::body() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.Packet.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Packet::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.Packet.body)
}
inline std::string* Packet::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:com.be.cube.core.networking.proxy.Packet.body)
  return _s;
}
inline const std::string& Packet::_internal_body() const {
  return _impl_.body_.Get();
}
inline void Packet::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* Packet::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* Packet::release_body() {
  // @@protoc_insertion_point(field_release:com.be.cube.core.networking.proxy.Packet.body)
  return _impl_.body_.Release();
}
inline void Packet::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.be.cube.core.networking.proxy.Packet.body)
}

// -------------------------------------------------------------------

// VersionRequest

// -------------------------------------------------------------------

// VersionResponse

// int32 version = 1;
inline void VersionResponse::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t VersionResponse::_internal_version() const {
  return _impl_.version_;
}
inline int32_t VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.VersionResponse.version)
  return _internal_version();
}
inline void VersionResponse::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void VersionResponse::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.VersionResponse.version)
}

// -------------------------------------------------------------------

// ServerSummary

// int64 recv_bytes = 1;
inline void ServerSummary::clear_recv_bytes() {
  _impl_.recv_bytes_ = int64_t{0};
}
inline int64_t ServerSummary::_internal_recv_bytes() const {
  return _impl_.recv_bytes_;
}
inline int64_t ServerSummary::recv_bytes() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.ServerSummary.recv_bytes)
  return _internal_recv_bytes();
}
inline void ServerSummary::_internal_set_recv_bytes(int64_t value) {
  
  _impl_.recv_bytes_ = value;
}
inline void ServerSummary::set_recv_bytes(int64_t value) {
  _internal_set_recv_bytes(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.ServerSummary.recv_bytes)
}

// int64 packet_cnt = 2;
inline void ServerSummary::clear_packet_cnt() {
  _impl_.packet_cnt_ = int64_t{0};
}
inline int64_t ServerSummary::_internal_packet_cnt() const {
  return _impl_.packet_cnt_;
}
inline int64_t ServerSummary::packet_cnt() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.ServerSummary.packet_cnt)
  return _internal_packet_cnt();
}
inline void ServerSummary::_internal_set_packet_cnt(int64_t value) {
  
  _impl_.packet_cnt_ = value;
}
inline void ServerSummary::set_packet_cnt(int64_t value) {
  _internal_set_packet_cnt(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.ServerSummary.packet_cnt)
}

// float elapsed_time = 3;
inline void ServerSummary::clear_elapsed_time() {
  _impl_.elapsed_time_ = 0;
}
inline float ServerSummary::_internal_elapsed_time() const {
  return _impl_.elapsed_time_;
}
inline float ServerSummary::elapsed_time() const {
  // @@protoc_insertion_point(field_get:com.be.cube.core.networking.proxy.ServerSummary.elapsed_time)
  return _internal_elapsed_time();
}
inline void ServerSummary::_internal_set_elapsed_time(float value) {
  
  _impl_.elapsed_time_ = value;
}
inline void ServerSummary::set_elapsed_time(float value) {
  _internal_set_elapsed_time(value);
  // @@protoc_insertion_point(field_set:com.be.cube.core.networking.proxy.ServerSummary.elapsed_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proxy
}  // namespace networking
}  // namespace core
}  // namespace cube
}  // namespace be
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::be::cube::core::networking::proxy::TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::be::cube::core::networking::proxy::TaskType>() {
  return ::com::be::cube::core::networking::proxy::TaskType_descriptor();
}
template <> struct is_proto_enum< ::com::be::cube::core::networking::proxy::Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::be::cube::core::networking::proxy::Operation>() {
  return ::com::be::cube::core::networking::proxy::Operation_descriptor();
}
template <> struct is_proto_enum< ::com::be::cube::core::networking::proxy::ServiceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::be::cube::core::networking::proxy::ServiceType>() {
  return ::com::be::cube::core::networking::proxy::ServiceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gaia_5fproxy_2eproto
