// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gaia_proxy.proto

#include "gaia_proxy.pb.h"
#include "gaia_proxy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace be {
namespace cube {
namespace core {
namespace networking {
namespace proxy {

static const char* DataTransferService_method_names[] = {
  "/com.be.cube.core.networking.proxy.DataTransferService/push",
  "/com.be.cube.core.networking.proxy.DataTransferService/pull",
  "/com.be.cube.core.networking.proxy.DataTransferService/unaryCall",
  "/com.be.cube.core.networking.proxy.DataTransferService/get_version",
  "/com.be.cube.core.networking.proxy.DataTransferService/push_v2",
};

std::unique_ptr< DataTransferService::Stub> DataTransferService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataTransferService::Stub> stub(new DataTransferService::Stub(channel));
  return stub;
}

DataTransferService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_push_(DataTransferService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_pull_(DataTransferService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unaryCall_(DataTransferService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_version_(DataTransferService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_push_v2_(DataTransferService_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientWriter< ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::pushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::com::be::cube::core::networking::proxy::Packet>::Create(channel_.get(), rpcmethod_push_, context, response);
}

void DataTransferService::Stub::experimental_async::push(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::experimental::ClientWriteReactor< ::com::be::cube::core::networking::proxy::Packet>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::com::be::cube::core::networking::proxy::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_push_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::AsyncpushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::com::be::cube::core::networking::proxy::Packet>::Create(channel_.get(), cq, rpcmethod_push_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::PrepareAsyncpushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::com::be::cube::core::networking::proxy::Packet>::Create(channel_.get(), cq, rpcmethod_push_, context, response, false, nullptr);
}

::grpc::Status DataTransferService::Stub::pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::com::be::cube::core::networking::proxy::Packet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pull_, context, request, response);
}

void DataTransferService::Stub::experimental_async::pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pull_, context, request, response, std::move(f));
}

void DataTransferService::Stub::experimental_async::pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pull_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::PrepareAsyncpullRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Metadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pull_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::AsyncpullRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpullRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataTransferService::Stub::unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::com::be::cube::core::networking::proxy::Packet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unaryCall_, context, request, response);
}

void DataTransferService::Stub::experimental_async::unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unaryCall_, context, request, response, std::move(f));
}

void DataTransferService::Stub::experimental_async::unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unaryCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::PrepareAsyncunaryCallRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unaryCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::AsyncunaryCallRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunaryCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataTransferService::Stub::get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::com::be::cube::core::networking::proxy::VersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_version_, context, request, response);
}

void DataTransferService::Stub::experimental_async::get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_version_, context, request, response, std::move(f));
}

void DataTransferService::Stub::experimental_async::get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>* DataTransferService::Stub::PrepareAsyncget_versionRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::be::cube::core::networking::proxy::VersionResponse, ::com::be::cube::core::networking::proxy::VersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_version_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>* DataTransferService::Stub::Asyncget_versionRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_versionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::push_v2Raw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>::Create(channel_.get(), rpcmethod_push_v2_, context);
}

void DataTransferService::Stub::experimental_async::push_v2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::com::be::cube::core::networking::proxy::Packet,::com::be::cube::core::networking::proxy::Packet>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::com::be::cube::core::networking::proxy::Packet,::com::be::cube::core::networking::proxy::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_push_v2_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::Asyncpush_v2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>::Create(channel_.get(), cq, rpcmethod_push_v2_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* DataTransferService::Stub::PrepareAsyncpush_v2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>::Create(channel_.get(), cq, rpcmethod_push_v2_, context, false, nullptr);
}

DataTransferService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataTransferService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< DataTransferService::Service, ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::ServerSummary>(
          [](DataTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::com::be::cube::core::networking::proxy::Packet>* reader,
             ::com::be::cube::core::networking::proxy::ServerSummary* resp) {
               return service->push(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataTransferService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataTransferService::Service, ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::be::cube::core::networking::proxy::Metadata* req,
             ::com::be::cube::core::networking::proxy::Packet* resp) {
               return service->pull(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataTransferService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataTransferService::Service, ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::be::cube::core::networking::proxy::Packet* req,
             ::com::be::cube::core::networking::proxy::Packet* resp) {
               return service->unaryCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataTransferService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataTransferService::Service, ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::be::cube::core::networking::proxy::VersionRequest* req,
             ::com::be::cube::core::networking::proxy::VersionResponse* resp) {
               return service->get_version(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataTransferService_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< DataTransferService::Service, ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>(
          [](DataTransferService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::com::be::cube::core::networking::proxy::Packet,
             ::com::be::cube::core::networking::proxy::Packet>* stream) {
               return service->push_v2(ctx, stream);
             }, this)));
}

DataTransferService::Service::~Service() {
}

::grpc::Status DataTransferService::Service::push(::grpc::ServerContext* context, ::grpc::ServerReader< ::com::be::cube::core::networking::proxy::Packet>* reader, ::com::be::cube::core::networking::proxy::ServerSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataTransferService::Service::pull(::grpc::ServerContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataTransferService::Service::unaryCall(::grpc::ServerContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataTransferService::Service::get_version(::grpc::ServerContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataTransferService::Service::push_v2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace be
}  // namespace cube
}  // namespace core
}  // namespace networking
}  // namespace proxy

