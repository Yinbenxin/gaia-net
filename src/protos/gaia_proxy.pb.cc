// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gaia_proxy.proto

#include "gaia_proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace be {
namespace cube {
namespace core {
namespace networking {
namespace proxy {
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_CONSTEXPR Conf::Conf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.overalltimeout_)*/int64_t{0}
  , /*decltype(_impl_.completionwaittimeout_)*/int64_t{0}
  , /*decltype(_impl_.packetintervaltimeout_)*/int64_t{0}
  , /*decltype(_impl_.maxretries_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfDefaultTypeInternal() {}
  union {
    Conf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfDefaultTypeInternal _Conf_default_instance_;
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frompartyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topartyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operator__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conf_)*/nullptr
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_.tasktype_)*/0
  , /*decltype(_impl_.operation_)*/0
  , /*decltype(_impl_.find_)*/false
  , /*decltype(_impl_.seq_)*/0
  , /*decltype(_impl_.ack_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
PROTOBUF_CONSTEXPR VersionRequest::VersionRequest(
    ::_pbi::ConstantInitialized) {}
struct VersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionRequestDefaultTypeInternal() {}
  union {
    VersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
PROTOBUF_CONSTEXPR VersionResponse::VersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionResponseDefaultTypeInternal() {}
  union {
    VersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
PROTOBUF_CONSTEXPR ServerSummary::ServerSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recv_bytes_)*/int64_t{0}
  , /*decltype(_impl_.packet_cnt_)*/int64_t{0}
  , /*decltype(_impl_.elapsed_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerSummaryDefaultTypeInternal() {}
  union {
    ServerSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerSummaryDefaultTypeInternal _ServerSummary_default_instance_;
}  // namespace proxy
}  // namespace networking
}  // namespace core
}  // namespace cube
}  // namespace be
}  // namespace com
static ::_pb::Metadata file_level_metadata_gaia_5fproxy_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_gaia_5fproxy_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gaia_5fproxy_2eproto = nullptr;

const uint32_t TableStruct_gaia_5fproxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Command, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Conf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Conf, _impl_.overalltimeout_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Conf, _impl_.completionwaittimeout_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Conf, _impl_.packetintervaltimeout_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Conf, _impl_.maxretries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.frompartyid_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.topartyid_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.tasktype_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.conf_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.find_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Metadata, _impl_.ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Packet, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::Packet, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::VersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::VersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::VersionResponse, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::ServerSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::ServerSummary, _impl_.recv_bytes_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::ServerSummary, _impl_.packet_cnt_),
  PROTOBUF_FIELD_OFFSET(::com::be::cube::core::networking::proxy::ServerSummary, _impl_.elapsed_time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::be::cube::core::networking::proxy::Command)},
  { 7, -1, -1, sizeof(::com::be::cube::core::networking::proxy::Conf)},
  { 17, -1, -1, sizeof(::com::be::cube::core::networking::proxy::Metadata)},
  { 34, -1, -1, sizeof(::com::be::cube::core::networking::proxy::Packet)},
  { 42, -1, -1, sizeof(::com::be::cube::core::networking::proxy::VersionRequest)},
  { 48, -1, -1, sizeof(::com::be::cube::core::networking::proxy::VersionResponse)},
  { 55, -1, -1, sizeof(::com::be::cube::core::networking::proxy::ServerSummary)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::be::cube::core::networking::proxy::_Command_default_instance_._instance,
  &::com::be::cube::core::networking::proxy::_Conf_default_instance_._instance,
  &::com::be::cube::core::networking::proxy::_Metadata_default_instance_._instance,
  &::com::be::cube::core::networking::proxy::_Packet_default_instance_._instance,
  &::com::be::cube::core::networking::proxy::_VersionRequest_default_instance_._instance,
  &::com::be::cube::core::networking::proxy::_VersionResponse_default_instance_._instance,
  &::com::be::cube::core::networking::proxy::_ServerSummary_default_instance_._instance,
};

const char descriptor_table_protodef_gaia_5fproxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gaia_proxy.proto\022!com.be.cube.core.net"
  "working.proxy\"\027\n\007Command\022\014\n\004name\030\001 \001(\t\"p"
  "\n\004Conf\022\026\n\016overallTimeout\030\001 \001(\003\022\035\n\025comple"
  "tionWaitTimeout\030\002 \001(\003\022\035\n\025packetIntervalT"
  "imeout\030\003 \001(\003\022\022\n\nmaxRetries\030\004 \001(\005\"\370\002\n\010Met"
  "adata\022\016\n\006taskId\030\001 \001(\t\022\023\n\013fromPartyId\030\002 \001"
  "(\t\022\021\n\ttoPartyId\030\003 \001(\t\022\020\n\010operator\030\004 \001(\t\022"
  "C\n\013serviceType\030\005 \001(\0162..com.be.cube.core."
  "networking.proxy.ServiceType\022=\n\010taskType"
  "\030\006 \001(\0162+.com.be.cube.core.networking.pro"
  "xy.TaskType\022\?\n\toperation\030\007 \001(\0162,.com.be."
  "cube.core.networking.proxy.Operation\0225\n\004"
  "conf\030\010 \001(\0132\'.com.be.cube.core.networking"
  ".proxy.Conf\022\014\n\004find\030\t \001(\010\022\013\n\003seq\030\n \001(\005\022\013"
  "\n\003ack\030\013 \001(\005\"S\n\006Packet\022;\n\006header\030\001 \001(\0132+."
  "com.be.cube.core.networking.proxy.Metada"
  "ta\022\014\n\004body\030\002 \001(\014\"\020\n\016VersionRequest\"\"\n\017Ve"
  "rsionResponse\022\017\n\007version\030\001 \001(\005\"M\n\rServer"
  "Summary\022\022\n\nrecv_bytes\030\001 \001(\003\022\022\n\npacket_cn"
  "t\030\002 \001(\003\022\024\n\014elapsed_time\030\003 \001(\002*\034\n\010TaskTyp"
  "e\022\007\n\003PSI\020\000\022\007\n\003RSS\020\001*O\n\tOperation\022\t\n\005STAR"
  "T\020\000\022\007\n\003RUN\020\001\022\010\n\004STOP\020\002\022\010\n\004KILL\020\003\022\014\n\010GET_"
  "DATA\020\004\022\014\n\010PUT_DATA\020\005*S\n\013ServiceType\022\010\n\004B"
  "ASE\020\000\022\010\n\004CUBE\020\001\022\010\n\004EDGE\020\002\022\n\n\006TENSOR\020\003\022\t\n"
  "\005OTHER\020\004\022\017\n\013CUBE_ENGINE\020\0052\232\004\n\023DataTransf"
  "erService\022e\n\004push\022).com.be.cube.core.net"
  "working.proxy.Packet\0320.com.be.cube.core."
  "networking.proxy.ServerSummary(\001\022^\n\004pull"
  "\022+.com.be.cube.core.networking.proxy.Met"
  "adata\032).com.be.cube.core.networking.prox"
  "y.Packet\022a\n\tunaryCall\022).com.be.cube.core"
  ".networking.proxy.Packet\032).com.be.cube.c"
  "ore.networking.proxy.Packet\022t\n\013get_versi"
  "on\0221.com.be.cube.core.networking.proxy.V"
  "ersionRequest\0322.com.be.cube.core.network"
  "ing.proxy.VersionResponse\022c\n\007push_v2\022).c"
  "om.be.cube.core.networking.proxy.Packet\032"
  ").com.be.cube.core.networking.proxy.Pack"
  "et(\0010\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_gaia_5fproxy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gaia_5fproxy_2eproto = {
    false, false, 1534, descriptor_table_protodef_gaia_5fproxy_2eproto,
    "gaia_proxy.proto",
    &descriptor_table_gaia_5fproxy_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_gaia_5fproxy_2eproto::offsets,
    file_level_metadata_gaia_5fproxy_2eproto, file_level_enum_descriptors_gaia_5fproxy_2eproto,
    file_level_service_descriptors_gaia_5fproxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gaia_5fproxy_2eproto_getter() {
  return &descriptor_table_gaia_5fproxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gaia_5fproxy_2eproto(&descriptor_table_gaia_5fproxy_2eproto);
namespace com {
namespace be {
namespace cube {
namespace core {
namespace networking {
namespace proxy {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gaia_5fproxy_2eproto);
  return file_level_enum_descriptors_gaia_5fproxy_2eproto[0];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gaia_5fproxy_2eproto);
  return file_level_enum_descriptors_gaia_5fproxy_2eproto[1];
}
bool Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gaia_5fproxy_2eproto);
  return file_level_enum_descriptors_gaia_5fproxy_2eproto[2];
}
bool ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Command::_Internal {
 public:
};

Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.be.cube.core.networking.proxy.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.be.cube.core.networking.proxy.Command)
}

inline void Command::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:com.be.cube.core.networking.proxy.Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:com.be.cube.core.networking.proxy.Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.be.cube.core.networking.proxy.Command.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.be.cube.core.networking.proxy.Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.be.cube.core.networking.proxy.Command.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.be.cube.core.networking.proxy.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.be.cube.core.networking.proxy.Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }


void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command*>(&to_msg);
  auto& from = static_cast<const Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.be.cube.core.networking.proxy.Command)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.be.cube.core.networking.proxy.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gaia_5fproxy_2eproto_getter, &descriptor_table_gaia_5fproxy_2eproto_once,
      file_level_metadata_gaia_5fproxy_2eproto[0]);
}

// ===================================================================

class Conf::_Internal {
 public:
};

Conf::Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.be.cube.core.networking.proxy.Conf)
}
Conf::Conf(const Conf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Conf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.overalltimeout_){}
    , decltype(_impl_.completionwaittimeout_){}
    , decltype(_impl_.packetintervaltimeout_){}
    , decltype(_impl_.maxretries_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.overalltimeout_, &from._impl_.overalltimeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxretries_) -
    reinterpret_cast<char*>(&_impl_.overalltimeout_)) + sizeof(_impl_.maxretries_));
  // @@protoc_insertion_point(copy_constructor:com.be.cube.core.networking.proxy.Conf)
}

inline void Conf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.overalltimeout_){int64_t{0}}
    , decltype(_impl_.completionwaittimeout_){int64_t{0}}
    , decltype(_impl_.packetintervaltimeout_){int64_t{0}}
    , decltype(_impl_.maxretries_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Conf::~Conf() {
  // @@protoc_insertion_point(destructor:com.be.cube.core.networking.proxy.Conf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Conf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Conf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Conf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.be.cube.core.networking.proxy.Conf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.overalltimeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxretries_) -
      reinterpret_cast<char*>(&_impl_.overalltimeout_)) + sizeof(_impl_.maxretries_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 overallTimeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.overalltimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 completionWaitTimeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.completionwaittimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 packetIntervalTimeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packetintervaltimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxRetries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.maxretries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Conf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.be.cube.core.networking.proxy.Conf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 overallTimeout = 1;
  if (this->_internal_overalltimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_overalltimeout(), target);
  }

  // int64 completionWaitTimeout = 2;
  if (this->_internal_completionwaittimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_completionwaittimeout(), target);
  }

  // int64 packetIntervalTimeout = 3;
  if (this->_internal_packetintervaltimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_packetintervaltimeout(), target);
  }

  // int32 maxRetries = 4;
  if (this->_internal_maxretries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxretries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.be.cube.core.networking.proxy.Conf)
  return target;
}

size_t Conf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.be.cube.core.networking.proxy.Conf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 overallTimeout = 1;
  if (this->_internal_overalltimeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_overalltimeout());
  }

  // int64 completionWaitTimeout = 2;
  if (this->_internal_completionwaittimeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_completionwaittimeout());
  }

  // int64 packetIntervalTimeout = 3;
  if (this->_internal_packetintervaltimeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packetintervaltimeout());
  }

  // int32 maxRetries = 4;
  if (this->_internal_maxretries() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxretries());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Conf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conf::GetClassData() const { return &_class_data_; }


void Conf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Conf*>(&to_msg);
  auto& from = static_cast<const Conf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.be.cube.core.networking.proxy.Conf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_overalltimeout() != 0) {
    _this->_internal_set_overalltimeout(from._internal_overalltimeout());
  }
  if (from._internal_completionwaittimeout() != 0) {
    _this->_internal_set_completionwaittimeout(from._internal_completionwaittimeout());
  }
  if (from._internal_packetintervaltimeout() != 0) {
    _this->_internal_set_packetintervaltimeout(from._internal_packetintervaltimeout());
  }
  if (from._internal_maxretries() != 0) {
    _this->_internal_set_maxretries(from._internal_maxretries());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conf::CopyFrom(const Conf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.be.cube.core.networking.proxy.Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conf::IsInitialized() const {
  return true;
}

void Conf::InternalSwap(Conf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conf, _impl_.maxretries_)
      + sizeof(Conf::_impl_.maxretries_)
      - PROTOBUF_FIELD_OFFSET(Conf, _impl_.overalltimeout_)>(
          reinterpret_cast<char*>(&_impl_.overalltimeout_),
          reinterpret_cast<char*>(&other->_impl_.overalltimeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Conf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gaia_5fproxy_2eproto_getter, &descriptor_table_gaia_5fproxy_2eproto_once,
      file_level_metadata_gaia_5fproxy_2eproto[1]);
}

// ===================================================================

class Metadata::_Internal {
 public:
  static const ::com::be::cube::core::networking::proxy::Conf& conf(const Metadata* msg);
};

const ::com::be::cube::core::networking::proxy::Conf&
Metadata::_Internal::conf(const Metadata* msg) {
  return *msg->_impl_.conf_;
}
Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.be.cube.core.networking.proxy.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.frompartyid_){}
    , decltype(_impl_.topartyid_){}
    , decltype(_impl_.operator__){}
    , decltype(_impl_.conf_){nullptr}
    , decltype(_impl_.servicetype_){}
    , decltype(_impl_.tasktype_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.find_){}
    , decltype(_impl_.seq_){}
    , decltype(_impl_.ack_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    _this->_impl_.taskid_.Set(from._internal_taskid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.frompartyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frompartyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frompartyid().empty()) {
    _this->_impl_.frompartyid_.Set(from._internal_frompartyid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topartyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topartyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topartyid().empty()) {
    _this->_impl_.topartyid_.Set(from._internal_topartyid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operator__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operator__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operator_().empty()) {
    _this->_impl_.operator__.Set(from._internal_operator_(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_conf()) {
    _this->_impl_.conf_ = new ::com::be::cube::core::networking::proxy::Conf(*from._impl_.conf_);
  }
  ::memcpy(&_impl_.servicetype_, &from._impl_.servicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ack_) -
    reinterpret_cast<char*>(&_impl_.servicetype_)) + sizeof(_impl_.ack_));
  // @@protoc_insertion_point(copy_constructor:com.be.cube.core.networking.proxy.Metadata)
}

inline void Metadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){}
    , decltype(_impl_.frompartyid_){}
    , decltype(_impl_.topartyid_){}
    , decltype(_impl_.operator__){}
    , decltype(_impl_.conf_){nullptr}
    , decltype(_impl_.servicetype_){0}
    , decltype(_impl_.tasktype_){0}
    , decltype(_impl_.operation_){0}
    , decltype(_impl_.find_){false}
    , decltype(_impl_.seq_){0}
    , decltype(_impl_.ack_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taskid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frompartyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frompartyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topartyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topartyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operator__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operator__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:com.be.cube.core.networking.proxy.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.Destroy();
  _impl_.frompartyid_.Destroy();
  _impl_.topartyid_.Destroy();
  _impl_.operator__.Destroy();
  if (this != internal_default_instance()) delete _impl_.conf_;
}

void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:com.be.cube.core.networking.proxy.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.ClearToEmpty();
  _impl_.frompartyid_.ClearToEmpty();
  _impl_.topartyid_.ClearToEmpty();
  _impl_.operator__.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.conf_ != nullptr) {
    delete _impl_.conf_;
  }
  _impl_.conf_ = nullptr;
  ::memset(&_impl_.servicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ack_) -
      reinterpret_cast<char*>(&_impl_.servicetype_)) + sizeof(_impl_.ack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.be.cube.core.networking.proxy.Metadata.taskId"));
        } else
          goto handle_unusual;
        continue;
      // string fromPartyId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_frompartyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.be.cube.core.networking.proxy.Metadata.fromPartyId"));
        } else
          goto handle_unusual;
        continue;
      // string toPartyId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_topartyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.be.cube.core.networking.proxy.Metadata.toPartyId"));
        } else
          goto handle_unusual;
        continue;
      // string operator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_operator_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.be.cube.core.networking.proxy.Metadata.operator"));
        } else
          goto handle_unusual;
        continue;
      // .com.be.cube.core.networking.proxy.ServiceType serviceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_servicetype(static_cast<::com::be::cube::core::networking::proxy::ServiceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.be.cube.core.networking.proxy.TaskType taskType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tasktype(static_cast<::com::be::cube::core::networking::proxy::TaskType>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.be.cube.core.networking.proxy.Operation operation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::com::be::cube::core::networking::proxy::Operation>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.be.cube.core.networking.proxy.Conf conf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool find = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.find_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ack = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.be.cube.core.networking.proxy.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.be.cube.core.networking.proxy.Metadata.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // string fromPartyId = 2;
  if (!this->_internal_frompartyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frompartyid().data(), static_cast<int>(this->_internal_frompartyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.be.cube.core.networking.proxy.Metadata.fromPartyId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frompartyid(), target);
  }

  // string toPartyId = 3;
  if (!this->_internal_topartyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topartyid().data(), static_cast<int>(this->_internal_topartyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.be.cube.core.networking.proxy.Metadata.toPartyId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_topartyid(), target);
  }

  // string operator = 4;
  if (!this->_internal_operator_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.be.cube.core.networking.proxy.Metadata.operator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_operator_(), target);
  }

  // .com.be.cube.core.networking.proxy.ServiceType serviceType = 5;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_servicetype(), target);
  }

  // .com.be.cube.core.networking.proxy.TaskType taskType = 6;
  if (this->_internal_tasktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_tasktype(), target);
  }

  // .com.be.cube.core.networking.proxy.Operation operation = 7;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_operation(), target);
  }

  // .com.be.cube.core.networking.proxy.Conf conf = 8;
  if (this->_internal_has_conf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::conf(this),
        _Internal::conf(this).GetCachedSize(), target, stream);
  }

  // bool find = 9;
  if (this->_internal_find() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_find(), target);
  }

  // int32 seq = 10;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_seq(), target);
  }

  // int32 ack = 11;
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.be.cube.core.networking.proxy.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.be.cube.core.networking.proxy.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string fromPartyId = 2;
  if (!this->_internal_frompartyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frompartyid());
  }

  // string toPartyId = 3;
  if (!this->_internal_topartyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topartyid());
  }

  // string operator = 4;
  if (!this->_internal_operator_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  // .com.be.cube.core.networking.proxy.Conf conf = 8;
  if (this->_internal_has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conf_);
  }

  // .com.be.cube.core.networking.proxy.ServiceType serviceType = 5;
  if (this->_internal_servicetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_servicetype());
  }

  // .com.be.cube.core.networking.proxy.TaskType taskType = 6;
  if (this->_internal_tasktype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tasktype());
  }

  // .com.be.cube.core.networking.proxy.Operation operation = 7;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // bool find = 9;
  if (this->_internal_find() != 0) {
    total_size += 1 + 1;
  }

  // int32 seq = 10;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seq());
  }

  // int32 ack = 11;
  if (this->_internal_ack() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ack());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.be.cube.core.networking.proxy.Metadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (!from._internal_frompartyid().empty()) {
    _this->_internal_set_frompartyid(from._internal_frompartyid());
  }
  if (!from._internal_topartyid().empty()) {
    _this->_internal_set_topartyid(from._internal_topartyid());
  }
  if (!from._internal_operator_().empty()) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  if (from._internal_has_conf()) {
    _this->_internal_mutable_conf()->::com::be::cube::core::networking::proxy::Conf::MergeFrom(
        from._internal_conf());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  if (from._internal_tasktype() != 0) {
    _this->_internal_set_tasktype(from._internal_tasktype());
  }
  if (from._internal_operation() != 0) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (from._internal_find() != 0) {
    _this->_internal_set_find(from._internal_find());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  if (from._internal_ack() != 0) {
    _this->_internal_set_ack(from._internal_ack());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.be.cube.core.networking.proxy.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskid_, lhs_arena,
      &other->_impl_.taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frompartyid_, lhs_arena,
      &other->_impl_.frompartyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topartyid_, lhs_arena,
      &other->_impl_.topartyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operator__, lhs_arena,
      &other->_impl_.operator__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, _impl_.ack_)
      + sizeof(Metadata::_impl_.ack_)
      - PROTOBUF_FIELD_OFFSET(Metadata, _impl_.conf_)>(
          reinterpret_cast<char*>(&_impl_.conf_),
          reinterpret_cast<char*>(&other->_impl_.conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gaia_5fproxy_2eproto_getter, &descriptor_table_gaia_5fproxy_2eproto_once,
      file_level_metadata_gaia_5fproxy_2eproto[2]);
}

// ===================================================================

class Packet::_Internal {
 public:
  static const ::com::be::cube::core::networking::proxy::Metadata& header(const Packet* msg);
};

const ::com::be::cube::core::networking::proxy::Metadata&
Packet::_Internal::header(const Packet* msg) {
  return *msg->_impl_.header_;
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.be.cube.core.networking.proxy.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::com::be::cube::core::networking::proxy::Metadata(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:com.be.cube.core.networking.proxy.Packet)
}

inline void Packet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:com.be.cube.core.networking.proxy.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:com.be.cube.core.networking.proxy.Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.be.cube.core.networking.proxy.Metadata header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.be.cube.core.networking.proxy.Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.be.cube.core.networking.proxy.Metadata header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.be.cube.core.networking.proxy.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.be.cube.core.networking.proxy.Packet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // .com.be.cube.core.networking.proxy.Metadata header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.be.cube.core.networking.proxy.Packet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::com::be::cube::core::networking::proxy::Metadata::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.be.cube.core.networking.proxy.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gaia_5fproxy_2eproto_getter, &descriptor_table_gaia_5fproxy_2eproto_once,
      file_level_metadata_gaia_5fproxy_2eproto[3]);
}

// ===================================================================

class VersionRequest::_Internal {
 public:
};

VersionRequest::VersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:com.be.cube.core.networking.proxy.VersionRequest)
}
VersionRequest::VersionRequest(const VersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  VersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.be.cube.core.networking.proxy.VersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gaia_5fproxy_2eproto_getter, &descriptor_table_gaia_5fproxy_2eproto_once,
      file_level_metadata_gaia_5fproxy_2eproto[4]);
}

// ===================================================================

class VersionResponse::_Internal {
 public:
};

VersionResponse::VersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.be.cube.core.networking.proxy.VersionResponse)
}
VersionResponse::VersionResponse(const VersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:com.be.cube.core.networking.proxy.VersionResponse)
}

inline void VersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VersionResponse::~VersionResponse() {
  // @@protoc_insertion_point(destructor:com.be.cube.core.networking.proxy.VersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.be.cube.core.networking.proxy.VersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.be.cube.core.networking.proxy.VersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.be.cube.core.networking.proxy.VersionResponse)
  return target;
}

size_t VersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.be.cube.core.networking.proxy.VersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionResponse::GetClassData() const { return &_class_data_; }


void VersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionResponse*>(&to_msg);
  auto& from = static_cast<const VersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.be.cube.core.networking.proxy.VersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionResponse::CopyFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.be.cube.core.networking.proxy.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionResponse::IsInitialized() const {
  return true;
}

void VersionResponse::InternalSwap(VersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gaia_5fproxy_2eproto_getter, &descriptor_table_gaia_5fproxy_2eproto_once,
      file_level_metadata_gaia_5fproxy_2eproto[5]);
}

// ===================================================================

class ServerSummary::_Internal {
 public:
};

ServerSummary::ServerSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.be.cube.core.networking.proxy.ServerSummary)
}
ServerSummary::ServerSummary(const ServerSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recv_bytes_){}
    , decltype(_impl_.packet_cnt_){}
    , decltype(_impl_.elapsed_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.recv_bytes_, &from._impl_.recv_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.elapsed_time_) -
    reinterpret_cast<char*>(&_impl_.recv_bytes_)) + sizeof(_impl_.elapsed_time_));
  // @@protoc_insertion_point(copy_constructor:com.be.cube.core.networking.proxy.ServerSummary)
}

inline void ServerSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recv_bytes_){int64_t{0}}
    , decltype(_impl_.packet_cnt_){int64_t{0}}
    , decltype(_impl_.elapsed_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerSummary::~ServerSummary() {
  // @@protoc_insertion_point(destructor:com.be.cube.core.networking.proxy.ServerSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:com.be.cube.core.networking.proxy.ServerSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.recv_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.elapsed_time_) -
      reinterpret_cast<char*>(&_impl_.recv_bytes_)) + sizeof(_impl_.elapsed_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 recv_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.recv_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 packet_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.packet_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float elapsed_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.be.cube.core.networking.proxy.ServerSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 recv_bytes = 1;
  if (this->_internal_recv_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_recv_bytes(), target);
  }

  // int64 packet_cnt = 2;
  if (this->_internal_packet_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_packet_cnt(), target);
  }

  // float elapsed_time = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elapsed_time = this->_internal_elapsed_time();
  uint32_t raw_elapsed_time;
  memcpy(&raw_elapsed_time, &tmp_elapsed_time, sizeof(tmp_elapsed_time));
  if (raw_elapsed_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_elapsed_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.be.cube.core.networking.proxy.ServerSummary)
  return target;
}

size_t ServerSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.be.cube.core.networking.proxy.ServerSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 recv_bytes = 1;
  if (this->_internal_recv_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_recv_bytes());
  }

  // int64 packet_cnt = 2;
  if (this->_internal_packet_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packet_cnt());
  }

  // float elapsed_time = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elapsed_time = this->_internal_elapsed_time();
  uint32_t raw_elapsed_time;
  memcpy(&raw_elapsed_time, &tmp_elapsed_time, sizeof(tmp_elapsed_time));
  if (raw_elapsed_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerSummary::GetClassData() const { return &_class_data_; }


void ServerSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerSummary*>(&to_msg);
  auto& from = static_cast<const ServerSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.be.cube.core.networking.proxy.ServerSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_recv_bytes() != 0) {
    _this->_internal_set_recv_bytes(from._internal_recv_bytes());
  }
  if (from._internal_packet_cnt() != 0) {
    _this->_internal_set_packet_cnt(from._internal_packet_cnt());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_elapsed_time = from._internal_elapsed_time();
  uint32_t raw_elapsed_time;
  memcpy(&raw_elapsed_time, &tmp_elapsed_time, sizeof(tmp_elapsed_time));
  if (raw_elapsed_time != 0) {
    _this->_internal_set_elapsed_time(from._internal_elapsed_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerSummary::CopyFrom(const ServerSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.be.cube.core.networking.proxy.ServerSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSummary::IsInitialized() const {
  return true;
}

void ServerSummary::InternalSwap(ServerSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerSummary, _impl_.elapsed_time_)
      + sizeof(ServerSummary::_impl_.elapsed_time_)
      - PROTOBUF_FIELD_OFFSET(ServerSummary, _impl_.recv_bytes_)>(
          reinterpret_cast<char*>(&_impl_.recv_bytes_),
          reinterpret_cast<char*>(&other->_impl_.recv_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gaia_5fproxy_2eproto_getter, &descriptor_table_gaia_5fproxy_2eproto_once,
      file_level_metadata_gaia_5fproxy_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proxy
}  // namespace networking
}  // namespace core
}  // namespace cube
}  // namespace be
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::be::cube::core::networking::proxy::Command*
Arena::CreateMaybeMessage< ::com::be::cube::core::networking::proxy::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::be::cube::core::networking::proxy::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::com::be::cube::core::networking::proxy::Conf*
Arena::CreateMaybeMessage< ::com::be::cube::core::networking::proxy::Conf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::be::cube::core::networking::proxy::Conf >(arena);
}
template<> PROTOBUF_NOINLINE ::com::be::cube::core::networking::proxy::Metadata*
Arena::CreateMaybeMessage< ::com::be::cube::core::networking::proxy::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::be::cube::core::networking::proxy::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::com::be::cube::core::networking::proxy::Packet*
Arena::CreateMaybeMessage< ::com::be::cube::core::networking::proxy::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::be::cube::core::networking::proxy::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::com::be::cube::core::networking::proxy::VersionRequest*
Arena::CreateMaybeMessage< ::com::be::cube::core::networking::proxy::VersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::be::cube::core::networking::proxy::VersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::be::cube::core::networking::proxy::VersionResponse*
Arena::CreateMaybeMessage< ::com::be::cube::core::networking::proxy::VersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::be::cube::core::networking::proxy::VersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::be::cube::core::networking::proxy::ServerSummary*
Arena::CreateMaybeMessage< ::com::be::cube::core::networking::proxy::ServerSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::be::cube::core::networking::proxy::ServerSummary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
