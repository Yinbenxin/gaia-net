// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gaia_proxy.proto
// Original file comments:
//
// Copyright 2020 BE-GAIA. All Rights Reserved.
//
#ifndef GRPC_gaia_5fproxy_2eproto__INCLUDED
#define GRPC_gaia_5fproxy_2eproto__INCLUDED

#include "gaia_proxy.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace com {
namespace be {
namespace cube {
namespace core {
namespace networking {
namespace proxy {

// data transfer service
class DataTransferService final {
 public:
  static constexpr char const* service_full_name() {
    return "com.be.cube.core.networking.proxy.DataTransferService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::com::be::cube::core::networking::proxy::Packet>> push(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::com::be::cube::core::networking::proxy::Packet>>(pushRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::be::cube::core::networking::proxy::Packet>> Asyncpush(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::be::cube::core::networking::proxy::Packet>>(AsyncpushRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncpush(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncpushRaw(context, response, cq));
    }
    virtual ::grpc::Status pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::com::be::cube::core::networking::proxy::Packet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>> Asyncpull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>>(AsyncpullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncpull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncpullRaw(context, request, cq));
    }
    virtual ::grpc::Status unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::com::be::cube::core::networking::proxy::Packet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>> AsyncunaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>>(AsyncunaryCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncunaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncunaryCallRaw(context, request, cq));
    }
    // add at v2
    virtual ::grpc::Status get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::com::be::cube::core::networking::proxy::VersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::VersionResponse>> Asyncget_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::VersionResponse>>(Asyncget_versionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::VersionResponse>> PrepareAsyncget_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::VersionResponse>>(PrepareAsyncget_versionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>> push_v2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>>(push_v2Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>> Asyncpush_v2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>>(Asyncpush_v2Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncpush_v2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncpush_v2Raw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void push(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::ClientWriteReactor< ::com::be::cube::core::networking::proxy::Packet>* reactor) = 0;
      #else
      virtual void push(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::experimental::ClientWriteReactor< ::com::be::cube::core::networking::proxy::Packet>* reactor) = 0;
      #endif
      virtual void pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // add at v2
      virtual void get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void push_v2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::com::be::cube::core::networking::proxy::Packet,::com::be::cube::core::networking::proxy::Packet>* reactor) = 0;
      #else
      virtual void push_v2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::com::be::cube::core::networking::proxy::Packet,::com::be::cube::core::networking::proxy::Packet>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::com::be::cube::core::networking::proxy::Packet>* pushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::com::be::cube::core::networking::proxy::Packet>* AsyncpushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncpushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>* AsyncpullRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncpullRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>* AsyncunaryCallRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncunaryCallRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::VersionResponse>* Asyncget_versionRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::be::cube::core::networking::proxy::VersionResponse>* PrepareAsyncget_versionRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* push_v2Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* Asyncpush_v2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncpush_v2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::com::be::cube::core::networking::proxy::Packet>> push(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::com::be::cube::core::networking::proxy::Packet>>(pushRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>> Asyncpush(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>>(AsyncpushRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncpush(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncpushRaw(context, response, cq));
    }
    ::grpc::Status pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::com::be::cube::core::networking::proxy::Packet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>> Asyncpull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>>(AsyncpullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncpull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncpullRaw(context, request, cq));
    }
    ::grpc::Status unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::com::be::cube::core::networking::proxy::Packet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>> AsyncunaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>>(AsyncunaryCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncunaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncunaryCallRaw(context, request, cq));
    }
    ::grpc::Status get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::com::be::cube::core::networking::proxy::VersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>> Asyncget_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>>(Asyncget_versionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>> PrepareAsyncget_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>>(PrepareAsyncget_versionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>> push_v2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>>(push_v2Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>> Asyncpush_v2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>>(Asyncpush_v2Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>> PrepareAsyncpush_v2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>>(PrepareAsyncpush_v2Raw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void push(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::ClientWriteReactor< ::com::be::cube::core::networking::proxy::Packet>* reactor) override;
      #else
      void push(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::experimental::ClientWriteReactor< ::com::be::cube::core::networking::proxy::Packet>* reactor) override;
      #endif
      void pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void pull(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void unaryCall(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void get_version(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void push_v2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::com::be::cube::core::networking::proxy::Packet,::com::be::cube::core::networking::proxy::Packet>* reactor) override;
      #else
      void push_v2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::com::be::cube::core::networking::proxy::Packet,::com::be::cube::core::networking::proxy::Packet>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::com::be::cube::core::networking::proxy::Packet>* pushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response) override;
    ::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>* AsyncpushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncpushRaw(::grpc::ClientContext* context, ::com::be::cube::core::networking::proxy::ServerSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* AsyncpullRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncpullRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Metadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* AsyncunaryCallRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncunaryCallRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::Packet& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>* Asyncget_versionRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::be::cube::core::networking::proxy::VersionResponse>* PrepareAsyncget_versionRaw(::grpc::ClientContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* push_v2Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* Asyncpush_v2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* PrepareAsyncpush_v2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_push_;
    const ::grpc::internal::RpcMethod rpcmethod_pull_;
    const ::grpc::internal::RpcMethod rpcmethod_unaryCall_;
    const ::grpc::internal::RpcMethod rpcmethod_get_version_;
    const ::grpc::internal::RpcMethod rpcmethod_push_v2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status push(::grpc::ServerContext* context, ::grpc::ServerReader< ::com::be::cube::core::networking::proxy::Packet>* reader, ::com::be::cube::core::networking::proxy::ServerSummary* response);
    virtual ::grpc::Status pull(::grpc::ServerContext* context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response);
    virtual ::grpc::Status unaryCall(::grpc::ServerContext* context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response);
    // add at v2
    virtual ::grpc::Status get_version(::grpc::ServerContext* context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response);
    virtual ::grpc::Status push_v2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_push() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::be::cube::core::networking::proxy::Packet>* /*reader*/, ::com::be::cube::core::networking::proxy::ServerSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpush(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::com::be::cube::core::networking::proxy::ServerSummary, ::com::be::cube::core::networking::proxy::Packet>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pull() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpull(::grpc::ServerContext* context, ::com::be::cube::core::networking::proxy::Metadata* request, ::grpc::ServerAsyncResponseWriter< ::com::be::cube::core::networking::proxy::Packet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unaryCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unaryCall() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_unaryCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unaryCall(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunaryCall(::grpc::ServerContext* context, ::com::be::cube::core::networking::proxy::Packet* request, ::grpc::ServerAsyncResponseWriter< ::com::be::cube::core::networking::proxy::Packet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_version() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_version(::grpc::ServerContext* context, ::com::be::cube::core::networking::proxy::VersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::be::cube::core::networking::proxy::VersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_push_v2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_push_v2() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_push_v2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push_v2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpush_v2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_push<WithAsyncMethod_pull<WithAsyncMethod_unaryCall<WithAsyncMethod_get_version<WithAsyncMethod_push_v2<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_push() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::ServerSummary>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::com::be::cube::core::networking::proxy::ServerSummary* response) { return this->push(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::be::cube::core::networking::proxy::Packet>* /*reader*/, ::com::be::cube::core::networking::proxy::ServerSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::com::be::cube::core::networking::proxy::Packet>* push(
      ::grpc::CallbackServerContext* /*context*/, ::com::be::cube::core::networking::proxy::ServerSummary* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::com::be::cube::core::networking::proxy::Packet>* push(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::com::be::cube::core::networking::proxy::ServerSummary* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_pull() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::com::be::cube::core::networking::proxy::Metadata* request, ::com::be::cube::core::networking::proxy::Packet* response) { return this->pull(context, request, response); }));}
    void SetMessageAllocatorFor_pull(
        ::grpc::experimental::MessageAllocator< ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* pull(
      ::grpc::CallbackServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* pull(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_unaryCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_unaryCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::com::be::cube::core::networking::proxy::Packet* request, ::com::be::cube::core::networking::proxy::Packet* response) { return this->unaryCall(context, request, response); }));}
    void SetMessageAllocatorFor_unaryCall(
        ::grpc::experimental::MessageAllocator< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_unaryCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unaryCall(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* unaryCall(
      ::grpc::CallbackServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* unaryCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_get_version() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::com::be::cube::core::networking::proxy::VersionRequest* request, ::com::be::cube::core::networking::proxy::VersionResponse* response) { return this->get_version(context, request, response); }));}
    void SetMessageAllocatorFor_get_version(
        ::grpc::experimental::MessageAllocator< ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get_version(
      ::grpc::CallbackServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get_version(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_push_v2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_push_v2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->push_v2(context); }));
    }
    ~ExperimentalWithCallbackMethod_push_v2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push_v2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* push_v2(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* push_v2(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_push<ExperimentalWithCallbackMethod_pull<ExperimentalWithCallbackMethod_unaryCall<ExperimentalWithCallbackMethod_get_version<ExperimentalWithCallbackMethod_push_v2<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_push<ExperimentalWithCallbackMethod_pull<ExperimentalWithCallbackMethod_unaryCall<ExperimentalWithCallbackMethod_get_version<ExperimentalWithCallbackMethod_push_v2<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_push() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::be::cube::core::networking::proxy::Packet>* /*reader*/, ::com::be::cube::core::networking::proxy::ServerSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pull() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unaryCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unaryCall() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_unaryCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unaryCall(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_version() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_push_v2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_push_v2() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_push_v2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push_v2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_push() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::be::cube::core::networking::proxy::Packet>* /*reader*/, ::com::be::cube::core::networking::proxy::ServerSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpush(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pull() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpull(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unaryCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unaryCall() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_unaryCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unaryCall(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunaryCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_version() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_version(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_push_v2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_push_v2() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_push_v2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push_v2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpush_v2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_push() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->push(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::be::cube::core::networking::proxy::Packet>* /*reader*/, ::com::be::cube::core::networking::proxy::ServerSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* push(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* push(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_pull() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pull(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* pull(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* pull(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_unaryCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_unaryCall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unaryCall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_unaryCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unaryCall(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* unaryCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* unaryCall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_get_version() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_version(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_version(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get_version(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get_version(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_push_v2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_push_v2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->push_v2(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_push_v2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status push_v2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* push_v2(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* push_v2(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pull() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::be::cube::core::networking::proxy::Metadata, ::com::be::cube::core::networking::proxy::Packet>* streamer) {
                       return this->Streamedpull(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Metadata* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedpull(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::be::cube::core::networking::proxy::Metadata,::com::be::cube::core::networking::proxy::Packet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unaryCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unaryCall() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::be::cube::core::networking::proxy::Packet, ::com::be::cube::core::networking::proxy::Packet>* streamer) {
                       return this->StreamedunaryCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unaryCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unaryCall(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::Packet* /*request*/, ::com::be::cube::core::networking::proxy::Packet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunaryCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::be::cube::core::networking::proxy::Packet,::com::be::cube::core::networking::proxy::Packet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_version() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::be::cube::core::networking::proxy::VersionRequest, ::com::be::cube::core::networking::proxy::VersionResponse>* streamer) {
                       return this->Streamedget_version(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_version(::grpc::ServerContext* /*context*/, const ::com::be::cube::core::networking::proxy::VersionRequest* /*request*/, ::com::be::cube::core::networking::proxy::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_version(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::be::cube::core::networking::proxy::VersionRequest,::com::be::cube::core::networking::proxy::VersionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_pull<WithStreamedUnaryMethod_unaryCall<WithStreamedUnaryMethod_get_version<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_pull<WithStreamedUnaryMethod_unaryCall<WithStreamedUnaryMethod_get_version<Service > > > StreamedService;
};

}  // namespace proxy
}  // namespace networking
}  // namespace core
}  // namespace cube
}  // namespace be
}  // namespace com


#endif  // GRPC_gaia_5fproxy_2eproto__INCLUDED
